package config

import (
	"fmt"
	"os"

	"gopkg.in/yaml.v3"
)

// Save saves configuration to a YAML file with helpful comments
func Save(cfg *Config, path string) error {
	// Create YAML content with comments
	yamlContent := fmt.Sprintf(`# Go SCIM Sync Configuration File
# This configuration was generated by the setup wizard
# For more information, see: https://github.com/gobeyondidentity/go-scim-sync

# Application settings
app:
  log_level: "%s"          # Options: debug, info, warn, error
  test_mode: %t            # Set to false to perform actual changes

# Google Workspace configuration
google_workspace:
  domain: "%s"                    # Your Google Workspace domain
  super_admin_email: "%s"  # Super admin email for impersonation
  service_account_key_path: "%s"  # Path to service account JSON file

# Beyond Identity configuration  
beyond_identity:
  api_token: "%s"                           # Your Beyond Identity API token
  scim_base_url: "%s"       # SCIM API base URL
  native_api_url: "%s"           # Native API base URL  
  group_prefix: "%s"                            # Prefix for created groups

# Synchronization settings
sync:
  groups:                                      # List of Google Workspace groups to sync%s
  retry_attempts: %d                            # Number of retry attempts for failed operations
  retry_delay_seconds: %d                      # Delay between retry attempts

# Server mode settings (for 'server' command)
server:
  port: %d                                   # HTTP server port
  schedule_enabled: %t                      # Enable automatic sync scheduling
  schedule: "%s"                     # Cron schedule

# Usage:
# 1. Validate config: ./go-scim-sync validate-config
# 2. Run one-time sync: ./go-scim-sync run
# 3. Start server mode: ./go-scim-sync server
#
# Server endpoints (when running in server mode):
# - Health check: GET http://localhost:%d/health
# - Manual sync: POST http://localhost:%d/sync
# - Metrics: GET http://localhost:%d/metrics
# - Version: GET http://localhost:%d/version
`,
		cfg.App.LogLevel,
		cfg.App.TestMode,
		cfg.GoogleWorkspace.Domain,
		cfg.GoogleWorkspace.SuperAdminEmail,
		cfg.GoogleWorkspace.ServiceAccountKeyPath,
		cfg.BeyondIdentity.APIToken,
		cfg.BeyondIdentity.SCIMBaseURL,
		cfg.BeyondIdentity.NativeAPIURL,
		cfg.BeyondIdentity.GroupPrefix,
		formatGroups(cfg.Sync.Groups),
		cfg.Sync.RetryAttempts,
		cfg.Sync.RetryDelaySeconds,
		cfg.Server.Port,
		cfg.Server.ScheduleEnabled,
		cfg.Server.Schedule,
		cfg.Server.Port,
		cfg.Server.Port,
		cfg.Server.Port,
		cfg.Server.Port,
	)

	// Write to file
	return os.WriteFile(path, []byte(yamlContent), 0644)
}

// formatGroups formats the groups list for YAML output
func formatGroups(groups []string) string {
	if len(groups) == 0 {
		return ""
	}
	
	result := ""
	for _, group := range groups {
		result += fmt.Sprintf("\n    - \"%s\"", group)
	}
	return result
}

// SaveAsYAML saves configuration using the standard YAML marshaler (alternative method)
func SaveAsYAML(cfg *Config, path string) error {
	data, err := yaml.Marshal(cfg)
	if err != nil {
		return fmt.Errorf("failed to marshal configuration: %w", err)
	}
	
	// Add header comment
	header := `# Go SCIM Sync Configuration File
# Generated automatically - modify as needed

`
	content := header + string(data)
	
	return os.WriteFile(path, []byte(content), 0644)
}